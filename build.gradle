/*
 * Copyright 2017 75py
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext.kotlin_version = '1.2.10'
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.0.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.dicedmelon.gradle:jacoco-android:0.1.2'
        classpath 'com.cookpad.android.licensetools:license-tools-plugin:1.0.0'
    }
}

allprojects {
    repositories {
        google()
        jcenter()
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

ext {
    publish_version_name = versionName()
    publish_version_code = versionCode()
}

task bumpMajor {
    doLast {
        ant.propertyfile(file: 'version.properties') {
            entry(key: 'major', type: 'int', operation: '+', value: 1)
            entry(key: 'minor', type: 'int', operation: '=', value: 0)
            entry(key: 'patch', type: 'int', operation: '=', value: 0)
            entry(key: 'id', type: 'int', operation: '+', value: 1)
        }
    }
}

task bumpMinor {
    doLast {
        ant.propertyfile(file: 'version.properties') {
            entry(key: 'minor', type: 'int', operation: '+', value: 1)
            entry(key: 'patch', type: 'int', operation: '=', value: 0)
            entry(key: 'id', type: 'int', operation: '+', value: 1)
        }
    }
}

task bumpPatch {
    doLast {
        ant.propertyfile(file: 'version.properties') {
            entry(key: 'patch', type: 'int', operation: '+', value: 1)
            entry(key: 'id', type: 'int', operation: '+', value: 1)
        }
    }
}

task updateReadme {
    doLast {
        def template = file('README_template.md').text
        def result = template
                .replaceAll("%%version%%", versionName())
        file("README.md").withWriter { it << result }
    }
}

task printVersion {
    doLast {
        println "Version name : " + versionName()
        println "Version code : " + versionCode()
    }
}

String versionName() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('version.properties').newDataInputStream())
    return properties['major'] + "." + properties['minor'] + "." + properties['patch']
}

int versionCode() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('version.properties').newDataInputStream())
    return Integer.parseInt(properties['id'].toString())
}

tasks.withType(JavaCompile) {
    options.fork = true
    options.incremental = true
}

tasks.withType(Test) {
    def maxCount = gradle.startParameter.maxWorkerCount
    maxParallelForks = (maxCount < 2) ? 1 : maxCount / 2
    forkEvery = 100
}
